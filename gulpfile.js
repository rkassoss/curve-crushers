var args = require('yargs').argv;
var gulp = require('gulp');
var uglify = require('gulp-uglify');
var pump = require('pump');
var cleanCSS = require('gulp-clean-css');
var concat = require('gulp-concat');
var rename = require('gulp-rename');
var runSequence = require('run-sequence');
var cachebust = require('gulp-cache-bust');
var replace = require('gulp-replace');
var clean = require('gulp-rimraf');
var sass = require('gulp-sass');
var bs = require('browser-sync').create();
var inject = require('gulp-inject');
var zip = require('gulp-zip');


var jsDest = 'assets/dist/js';
var cssDest = 'assets/dist/css';
var fontsDest = 'assets/dist/fonts';
var componentsPath = 'app/components/**/*.js';
var servicesPath = 'app/services/**/*.js';
var viewsPath = 'app/views/**/*.js';
var cssPath = 'assets/css/*.css';

var productionPath = '.build/';
var masterPath = '.master/';

var timestamp = new Date().getTime();

var appName, appTitle;


//browser sync
gulp.task('browser-sync', ['sass'], function() {
    bs.init({
        server: {
            baseDir: "./"
        }
    });
});


//scss
gulp.task('sass', function () {
    return gulp.src('assets/scss/**/*.scss')
                .pipe(sass())
                .pipe(gulp.dest('assets/dist/css'))
                .pipe(bs.reload({stream: true}));
});

//combine and minify components
gulp.task('components-js', function () {
    return gulp.src(componentsPath)
        .pipe(concat('components.js'))
        .pipe(gulp.dest(jsDest))
        .pipe(rename('components.min.js'))
        .pipe(uglify().on('error', function(e){
            console.log(e);
         }))
        .pipe(gulp.dest(jsDest));
});

//combine and minify services
gulp.task('services-js', function () {
    return gulp.src(['!app/services/utility.service.js', servicesPath])
        .pipe(concat('services.js'))
        .pipe(gulp.dest(jsDest))
        .pipe(rename('services.min.js'))
        .pipe(uglify().on('error', function(e){
            console.log(e);
         }))
        .pipe(gulp.dest(jsDest));
});

//combine and minify directives
gulp.task('views-js', function () {
    return gulp.src(['!app/directives/qlik.directive.js', viewsPath])
        .pipe(concat('views.js'))
        .pipe(gulp.dest(jsDest))
        .pipe(rename('views.min.js'))
        .pipe(uglify().on('error', function(e){
            console.log(e);
         }))
        .pipe(gulp.dest(jsDest));
});

//move fonts
gulp.task('move-fonts', function() {
    return gulp.src(['assets/fonts/**/*'])
        .pipe(gulp.dest(fontsDest));
});

//move already minified css
gulp.task('move-css', function() {
    return gulp.src(['assets/css/bootstrap.min.css', 'assets/css/font-awesome.min.css'])
        .pipe(gulp.dest(cssDest));
});

//minifiy fonts & move
gulp.task('minify-css', function() {
    return gulp.src(['!assets/css/bootstrap.min.css', '!assets/css/font-awesome.min.css', cssPath])
        .pipe(cleanCSS({
            compatibility: 'ie8'
        }))
        .pipe(gulp.dest(cssDest));
});

//cache-control - add querystring timestamp to everything in index.html
gulp.task('rev', function () {
    gulp.src('./index.html')
        .pipe(cachebust({
            type: 'timestamp'
        }))
        .pipe(gulp.dest('.'));
});

gulp.task('clean', [], function() {
    console.log("Clean all files in build folder");
    return gulp.src(productionPath + "*", { read: false }).pipe(clean());
});

//move everything into the production folder
gulp.task('move-production-folder', function () {
    console.log(appName);
    return gulp.src([
            '*app/**/*.html',
            '*app/app.js',
            '*app/app.routes.js',
            '*assets/**/*',
            '*bower_components/**/*',
            './wbfolder.wbl',
            './curve-crushers.qext'
        ])
        .pipe(gulp.dest(productionPath));
});

//# prepare index file in production folder
gulp.task('prep-index', function(){
    return gulp.src('index.html')
    // inject stylesheets, bower minified asset path, qlik requirejs files in the index.html

    // add base tag
    .pipe(inject(gulp.src('index.html'), {
        starttag: '<!-- GulpInject:addBaseTag -->',
        endtag: '<!-- End:addBaseTag -->',
        transform: function () {
          return '<base href="/extensions/curve-crushers/index.html">';
        },
        empty: true
    }))

    // qlik assets
    .pipe(inject(gulp.src('./index.html'), {
      starttag: '<!-- GulpInject:replaceQlikAssets -->',
      endtag: '<!-- End:replaceQlikAssets -->',
      transform: function () {
        var qlikAssets = [
          '<link rel="stylesheet" href="../../resources/autogenerated/qlik-styles.css" />',
          '<script src="../../resources/assets/external/requirejs/require.js?"></script>'
         ].join("\n");
        return qlikAssets;
      },
      empty: true
    }))

    // move transformed index file to production folder
    .pipe(gulp.dest(productionPath));
});

//# gulp build-production
gulp.task('build-prep', function (callback) {
    return runSequence('clean', 'components-js', 'services-js', 'views-js', 'move-fonts', 'move-css', 'minify-css', 'rev', 'move-production-folder', 'prep-index', callback);
});

// zip the build folder
gulp.task('build-zip', function () {
    return gulp.src('.BUILD/**')
        .pipe(zip('curve-crushers-'+timestamp+'.zip'))
        .pipe(gulp.dest('.BUILDZIP/'));
});

gulp.task('clean-master', [], function() {
    console.log("Clean all files in master folder");
    return gulp.src(masterPath + "*", { read: false }).pipe(clean());
});

//move everything into the master folder
gulp.task('move-master-folder', function () {
    return gulp.src([
            '*app/**/*',
            '*assets/**/*',
            './*.json',
            './*.wbl',
            './*.pdf',
            './*.md',
            './*.html',
            './*.js',
            './*.gitignore',
            './*.qext'
        ])
        .pipe(gulp.dest(masterPath));
});

// zip the master folder
gulp.task('master-zip', function () {
    return gulp.src('.master/**')
        .pipe(zip('curve-crushers-master-'+timestamp+'.zip'))
        .pipe(gulp.dest('.MASTERZIP/'));
});






// FINAL COMMANDS

//# gulp build-dev
gulp.task('build-dev', function (callback) {
    return runSequence('components-js', 'services-js', 'views-js', 'move-fonts', 'move-css', 'minify-css', 'rev', callback);
});

//watch all changes in dev, generate dist and reload browsersync
gulp.task('watch', ['browser-sync'], function () {
    gulp.watch("assets/scss/**/*.scss", ['sass']);
    gulp.watch("**/*.html").on('change', bs.reload);
    gulp.watch("app/*.js").on('change', bs.reload);

    gulp.watch(componentsPath).on('change', function() { runSequence('components-js', 'rev', bs.reload); });
    gulp.watch(servicesPath).on('change', function() { runSequence('services-js', 'rev', bs.reload); });
    gulp.watch(viewsPath).on('change', function() { runSequence('views-js', 'rev', bs.reload); });
    gulp.watch(cssPath).on('change', function() { runSequence('minify-css', 'rev', bs.reload); });

});

// full build
gulp.task('build', function (callback) {
    return runSequence('build-prep', 'build-zip', callback);
});

// generate master code
gulp.task('master', function(callback){
    return runSequence('clean-master', 'move-master-folder', 'master-zip', callback);
});